/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include "am335x-bone-common-no-capemgr.dtsi"
#include "am335x-bone-common-universal.dtsi"
#include "am33xx-overlay-edma-fix.dtsi"
#include "am335x-boneblue-wl1835.dtsi"
/* #include "am335x-bone-jtag.dtsi" */

/* pruss: pick one: */

/*
 * /etc/modprobe.d/pruss-blacklist.conf
 *
 * blacklist uio_pruss
 */

/* #include "am33xx-pruss-rproc.dtsi" */

/*
 * /etc/modprobe.d/pruss-blacklist.conf
 *
 * blacklist pruss
 * blacklist pruss_intc
 * blacklist pru-rproc
 */

/* #include "am33xx-pruss-uio.dtsi" */

/ {
	model = "TI AM335x BeagleBone Blue";
	compatible = "ti,am335x-bone-blue", "ti,am335x-bone", "ti,am33xx";
};

&ldo3_reg {
	regulator-min-microvolt = <1800000>;
	regulator-max-microvolt = <1800000>;
	regulator-always-on;
};

&mmc1 {
	vmmc-supply = <&vmmcsd_fixed>;
};

&mmc2 {
	vmmc-supply = <&vmmcsd_fixed>;
	pinctrl-names = "default";
	pinctrl-0 = <&emmc_pins>;
	bus-width = <8>;
	status = "okay";
};

&mac {
	status = "disabled";
};

&cpu0_opp_table {
	/*
	 * All PG 2.0 silicon may not support 1GHz but some of the early
	 * BeagleBone Blacks have PG 2.0 silicon which is guaranteed
	 * to support 1GHz OPP so enable it for PG 2.0 on this board.
	 */
	oppnitro@1000000000 {
		opp-supported-hw = <0x06 0x0100>;
	};
};



/****************************************
* Pin Muxing
****************************************/
&am33xx_pinmux {
	mux_helper_pins: pins {
		pinctrl-single,pins = <
			/* HRPWM 1 */
			0x048  0x6 /* P9_14 | MODE 6 */
			0x04c  0x6 /* P9_16 | MODE 6 */

			/* HRPWM 2 */
			0x020  0x4 /* P8_19 | MODE 4 */
			0x024  0x4 /* P8_13 | MODE 4 */

			/* EQEP */
			0x1A0 0x31  /* P9_42,EQEP0A, MODE1 */
			0x1A4 0x31  /* P9_27,EQEP0B, MODE1 */
			0x0D4 0x32  /* P8_33,EQEP1B, MODE2 */
			0x0D0 0x32  /* P8_35,EQEP1A, MODE2 */
			0x030 0x34  /* P8_12,EQEP2A_in, MODE4 */
			0x034 0x34  /* P8_11,EQEP2B_in, MODE4 */

			/* PRU encoder input */
			0x03c 0x36	/* P8_15,PRU0_r31_15,MODE6 */
			0x038 0x36	/* P8_16,PRU0_r31_16,MODE6 */

			/* PRU Servo output */
			0x0e0 0x25	/*pru1_pru_r30_8, MODE5*/
			0x0e8 0x25	/*pru1_pru_r30_10, MODE5 */
			0x0e4 0x25	/*pr1_pru1_pru_r30_9, MODE5 */
			0x0ec 0x25	/*pru1_pru_r30_11, MODE5 */
			0x0b8 0x25	/*pru1_pru_r30_6, MODE5 */
			0x0bc 0x25	/*pru1_pru_r30_7, MODE5 */
			0x0b0 0x25	/*pru1_pru_r30_4, MODE5 */
			0x0b4 0x25	/*pru1_pru_r30_5, MODE5 */

			/* GPIO Inputs */
			0x09c 0x37	/*P8.9  Pause BUTTON, input pullup*/
			0x098 0x37	/*P8.10 MODE BUTTON input pullup*/
			0x1AC 0x37	/*P9.25 MPU-9150 INTERRUPT IN*/

			/* GPIO Outputs
			0x090 0x0F	/*P8.7 - R7*/
			0x094 0x0F	/*P8.8*/
			0x028 0x0F	/*P8.14*/
			0x02C 0x0F	/*P8.17*/
			0x08c 0x0F	/*P8.18*/
			0x07c 0x0F	/*P8.26*/
			/* 0x0?? 0x0F	/*P8.32 - T5 - BATT_LED3 */
			0x0cc 0x0F	/*P8.34*/
			0x0C8 0x0F	/*P8.36*/
			0x0a8 0x0F	/*P8.43*/
			0x0ac 0x0F	/*P8.44*/
			0x0a0 0x0F	/*P8.45*/
			0x0a4 0x0F	/*P8.46*/
			0x078 0x0F	/*P9.12*/
			0x074 0x0F	/*P9.13*/
			0x040 0x0F	/*P9.15*/
			0x044 0x0F	/*P9.23*/
			0x19C 0x0F	/*P9.28*/
			0x1b4 0x0F	/*P9.41*/

			/* SPI1 */
			/* 0x190 0x33	/*spi1_sclk,INPUT_PULLUP,MODE3 */
			/* 0x194 0x33	/*spi1_d0,INPUT_PULLUP,MODE3 */
			/* 0x198 0x13	/*spi1_d1,OUTPUT_PULLUP,MODE3 */
			/* 0x19c 0x0F	/*spi1_cs0,OUTPUT_PULLUP,MODE7 */

			/* UART1 */
			0x184 0x10 /*P9.24,uart1_txd,MODE0,OUTPUT*/
			0x180 0x30 /*P9.26,uart1_rxd,MODE0,INPUT*/

			/* UART2 */
			0x150 0x21	/*P9.22,uart2_rxd,MODE1 */
			0x154 0x11	/*P9.21,uart2_txd,MODE1 */


			/* UART5 */
			0x0C4 0x34	/* P8.38,uart5_rxd,MODE4 */
			0x0C0 0x14	/* P8.37,uart5_txd,MODE4 */

		>;
	};

	i2c1_pins: pinmux_i2c1_pins {
		pinctrl-single,pins = <
			/* I2C1 */
			AM33XX_IOPAD(0x15C, PIN_INPUT_PULLUP | MUX_MODE3) /* P9.17,i2c1_scl */
			0x158 0x32	/* P9.18,i2c1_sda,INPUT_PULLUP,MODE2 */

		>;
	};

	i2c2_pins: pinmux_i2c2_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x978, PIN_INPUT_PULLUP | MUX_MODE3)	/* uart1_ctsn.i2c2_sda */
			AM33XX_IOPAD(0x97c, PIN_INPUT_PULLUP | MUX_MODE3)	/* uart1_rtsn.i2c2_scl */
		>;
	};

	/****************************************/
	/* DSM2 UART4 pinmux                    */
	/* only pin that swaps between GPIO&UART*/
	/****************************************/
	P9_11_default_pin: pinmux_P9_11_default_pin {
		pinctrl-single,pins = <0x070  0x36>; };     /* Mode 6 uart */
	P9_11_gpio_pin: pinmux_P9_11_gpio_pin {
		pinctrl-single,pins = <0x070  0x2F>; };     /* Mode 7, RxActive */
	P9_11_gpio_pu_pin: pinmux_P9_11_gpio_pu_pin {
		pinctrl-single,pins = <0x070  0x37>; };     /* Mode 7, Pull-Up, RxActive */
	P9_11_gpio_pd_pin: pinmux_P9_11_gpio_pd_pin {
		pinctrl-single,pins = <0x070  0x27>; };     /* Mode 7, Pull-Down, RxActive */
	P9_11_uart_pin: pinmux_P9_11_uart_pin {
		pinctrl-single,pins = <0x070  0x36>; };     /* Mode 6, uart */
};

&ocp {
    /****************************************
    *    activates the pinmux helper list of pin modes
    ****************************************/
	test_helper: helper {
		compatible = "bone-pinmux-helper";
		pinctrl-names = "default";
		pinctrl-0 = <&mux_helper_pins>;

		status = "okay";
	};

    /****************************************
    *    configurable DSM2 pin swaps between GPIO & UART4 at runtime
    ****************************************/
	P9_11_pinmux {
		compatible = "bone-pinmux-helper";
		status = "okay";
		pinctrl-names = "default", "gpio", "gpio_pu", "gpio_pd", "uart";

		pinctrl-0 = <&P9_11_default_pin>;
		pinctrl-1 = <&P9_11_gpio_pin>;
		pinctrl-2 = <&P9_11_gpio_pu_pin>;
		pinctrl-3 = <&P9_11_gpio_pd_pin>;
		pinctrl-4 = <&P9_11_uart_pin>;
	};
};


/****************************************
		PWMSS
****************************************/
&epwmss0 {
	status = "okay";
};

&epwmss1 {
	status = "okay";
};

&epwmss2 {
	status = "okay";
};



&ehrpwm0 {
	status = "okay";
};

&ehrpwm1 {
	status = "okay";
};

&ehrpwm2 {
	status = "okay";
};


&eqep0 {
	count_mode = <0>;  /* 0 - Quadrature mode, normal 90 phase offset cha & chb.  1 - Direction mode.  cha input = clock, chb input = direction */
	swap_inputs = <0>; /* Are channel A and channel B swapped? (0 - no, 1 - yes) */
	invert_qa = <1>;   /* Should we invert the channel A input?  */
	invert_qb = <1>;   /* Should we invert the channel B input? I invert these because my encoder outputs drive transistors that pull down the pins */
	invert_qi = <0>;   /* Should we invert the index input? */
	invert_qs = <0>;   /* Should we invert the strobe input? */

	status = "okay";
};

&eqep1 {
	count_mode = <0>;  /* 0 - Quadrature mode, normal 90 phase offset cha & chb.  1 - Direction mode.  cha input = clock, chb input = direction */
	swap_inputs = <0>; /* Are channel A and channel B swapped? (0 - no, 1 - yes) */
	invert_qa = <1>;   /* Should we invert the channel A input?  */
	invert_qb = <1>;   /* Should we invert the channel B input? I invert these because my encoder outputs drive transistors that pull down the pins */
	invert_qi = <0>;   /* Should we invert the index input? */
	invert_qs = <0>;   /* Should we invert the strobe input? */

	status = "okay";
};

&eqep2 {
	count_mode = <0>;  /* 0 - Quadrature mode, normal 90 phase offset cha & chb.  1 - Direction mode.  cha input = clock, chb input = direction */
	swap_inputs = <0>; /* Are channel A and channel B swapped? (0 - no, 1 - yes) */
	invert_qa = <1>;   /* Should we invert the channel A input?  */
	invert_qb = <1>;   /* Should we invert the channel B input? I invert these because my encoder outputs drive transistors that pull down the pins */
	invert_qi = <0>;   /* Should we invert the index input? */
	invert_qs = <0>;   /* Should we invert the strobe input? */

	status = "okay";
};


/****************************************
	UART

	UART 1, 2, 5 are used on the cape.
	The Beaglebone Blue uses others so all are enabled here.
****************************************/

&uart1 {
	status = "okay";
};

&uart2 {
	status = "okay";
};

&uart4 {
	status = "okay";
};

&uart5 {
	status = "okay";
};


/****************************************
		PRU
****************************************/
&pruss {
	status = "okay";
};


/****************************************
		I2C
****************************************/
&i2c1 {	        /* i2c1 is numbered correctly */
	status = "okay";

	/* this is the configuration part */
	clock-frequency = <400000>;

	#address-cells = <1>;
	#size-cells = <0>;

	/* add any i2c devices on the bus here */
};

&i2c2 {	        /* i2c2 is numbered correctly */
	pinctrl-names = "default";
	pinctrl-0 = <&i2c2_pins>;

	status = "okay";
	clock-frequency = <400000>;

	#address-cells = <1>;
	#size-cells = <0>;

	/* add any i2c devices on the bus here */
};

/****************************************
		SPI
****************************************/
&spi1 {
	pinctrl-names = "default";
	pinctrl-0 = <&P9_31_spi_pin	/* spi1_sclk */
		&P9_29_spi_pin		/* spi1_d0 */
		&P9_30_spi_pin		/* spi1_d1 */
		&P9_28_gpio_pu_pin	/* gpio?_? */
	>;

    #address-cells = <1>;
    #size-cells = <0>;
    status = "okay";

    spidev@1 {
         spi-max-frequency = <24000000>;
         reg = <0>;
         compatible = "linux,spidev";
    };
};
